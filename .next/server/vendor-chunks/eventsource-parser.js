"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/eventsource-parser";
exports.ids = ["vendor-chunks/eventsource-parser"];
exports.modules = {

/***/ "(rsc)/./node_modules/eventsource-parser/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/eventsource-parser/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createParser: () => (/* binding */ createParser)\n/* harmony export */ });\nfunction createParser(onParse) {\n    let isFirstChunk;\n    let buffer;\n    let startingPosition;\n    let startingFieldLength;\n    let eventId;\n    let eventName;\n    let data;\n    reset();\n    return {\n        feed,\n        reset\n    };\n    function reset() {\n        isFirstChunk = true;\n        buffer = \"\";\n        startingPosition = 0;\n        startingFieldLength = -1;\n        eventId = void 0;\n        eventName = void 0;\n        data = \"\";\n    }\n    function feed(chunk) {\n        buffer = buffer ? buffer + chunk : chunk;\n        if (isFirstChunk && hasBom(buffer)) {\n            buffer = buffer.slice(BOM.length);\n        }\n        isFirstChunk = false;\n        const length = buffer.length;\n        let position = 0;\n        let discardTrailingNewline = false;\n        while(position < length){\n            if (discardTrailingNewline) {\n                if (buffer[position] === \"\\n\") {\n                    ++position;\n                }\n                discardTrailingNewline = false;\n            }\n            let lineLength = -1;\n            let fieldLength = startingFieldLength;\n            let character;\n            for(let index = startingPosition; lineLength < 0 && index < length; ++index){\n                character = buffer[index];\n                if (character === \":\" && fieldLength < 0) {\n                    fieldLength = index - position;\n                } else if (character === \"\\r\") {\n                    discardTrailingNewline = true;\n                    lineLength = index - position;\n                } else if (character === \"\\n\") {\n                    lineLength = index - position;\n                }\n            }\n            if (lineLength < 0) {\n                startingPosition = length - position;\n                startingFieldLength = fieldLength;\n                break;\n            } else {\n                startingPosition = 0;\n                startingFieldLength = -1;\n            }\n            parseEventStreamLine(buffer, position, fieldLength, lineLength);\n            position += lineLength + 1;\n        }\n        if (position === length) {\n            buffer = \"\";\n        } else if (position > 0) {\n            buffer = buffer.slice(position);\n        }\n    }\n    function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {\n        if (lineLength === 0) {\n            if (data.length > 0) {\n                onParse({\n                    type: \"event\",\n                    id: eventId,\n                    event: eventName || void 0,\n                    data: data.slice(0, -1)\n                });\n                data = \"\";\n                eventId = void 0;\n            }\n            eventName = void 0;\n            return;\n        }\n        const noValue = fieldLength < 0;\n        const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));\n        let step = 0;\n        if (noValue) {\n            step = lineLength;\n        } else if (lineBuffer[index + fieldLength + 1] === \" \") {\n            step = fieldLength + 2;\n        } else {\n            step = fieldLength + 1;\n        }\n        const position = index + step;\n        const valueLength = lineLength - step;\n        const value = lineBuffer.slice(position, position + valueLength).toString();\n        if (field === \"data\") {\n            data += value ? \"\".concat(value, \"\\n\") : \"\\n\";\n        } else if (field === \"event\") {\n            eventName = value;\n        } else if (field === \"id\" && !value.includes(\"\\x00\")) {\n            eventId = value;\n        } else if (field === \"retry\") {\n            const retry = parseInt(value, 10);\n            if (!Number.isNaN(retry)) {\n                onParse({\n                    type: \"reconnect-interval\",\n                    value: retry\n                });\n            }\n        }\n    }\n}\nconst BOM = [\n    239,\n    187,\n    191\n];\nfunction hasBom(buffer) {\n    return BOM.every((charCode, index)=>buffer.charCodeAt(index) === charCode);\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/eventsource-parser/dist/index.js\n");

/***/ })

};
;